#!/bin/bash\n\n# ARM64 VM 전용 Yocto 환경 실행 스크립트\n# exec format error 완전 해결을 위한 강제 수정\n\nset -e\n\n# 색상 정의\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\nlog_info() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nlog_step() {\n    echo -e \"${BLUE}[STEP]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\necho \"🔧 ARM64 VM exec format error 완전 해결\"\necho \"========================================\"\necho\n\n# 시스템 확인\nARCH=$(uname -m)\nlog_info \"시스템 아키텍처: $ARCH\"\n\nif [ \"$ARCH\" != \"aarch64\" ]; then\n    log_error \"이 스크립트는 ARM64 VM (aarch64) 전용입니다.\"\n    echo \"현재 시스템: $ARCH\"\n    exit 1\nfi\n\n# Docker 서비스 확인\nlog_step \"Docker 서비스 상태 확인...\"\nif ! systemctl is-active --quiet docker; then\n    log_warning \"Docker 서비스가 실행되지 않고 있습니다.\"\n    echo \"다음 명령으로 Docker를 시작하세요:\"\n    echo \"sudo systemctl start docker\"\n    exit 1\nfi\n\n# 기존 이미지 완전 삭제\nDOCKER_IMAGE=\"jabang3/yocto-lecture:5.0-lts\"\nlog_step \"기존 이미지 완전 삭제 중...\"\ndocker rmi -f $DOCKER_IMAGE 2>/dev/null || true\ndocker system prune -f 2>/dev/null || true\n\n# 실행 방법 선택\necho \"ARM64 VM에서 실행 방법을 선택하세요:\"\necho \"1) ARM64 네이티브 (권장)\"\necho \"2) x86_64 에뮬레이션 (강의 환경 일치)\"\nread -p \"선택 [1/2]: \" choice\n\nif [ \"$choice\" = \"2\" ]; then\n    # x86_64 에뮬레이션 모드\n    log_info \"x86_64 에뮬레이션 모드를 설정합니다.\"\n    \n    # QEMU 설치 확인\n    if ! dpkg -l | grep -q qemu-user-static; then\n        log_step \"QEMU 설치 중...\"\n        sudo apt-get update\n        sudo apt-get install -y qemu-user-static binfmt-support\n    fi\n    \n    # QEMU 에뮬레이션 활성화\n    log_step \"QEMU 에뮬레이션 활성화 중...\"\n    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    \n    # x86_64 이미지 강제 다운로드\n    log_step \"x86_64 이미지 강제 다운로드 중...\"\n    docker pull --platform linux/amd64 $DOCKER_IMAGE\n    PLATFORM_FLAG=\"--platform linux/amd64\"\n    BB_THREADS=\"4\"\n    PARALLEL_MAKE=\"-j 4\"\n    \nelse\n    # ARM64 네이티브 모드\n    log_info \"ARM64 네이티브 모드를 설정합니다.\"\n    \n    # ARM64 이미지 강제 다운로드\n    log_step \"ARM64 이미지 강제 다운로드 중...\"\n    docker pull --platform linux/arm64 $DOCKER_IMAGE\n    PLATFORM_FLAG=\"--platform linux/arm64\"\n    BB_THREADS=\"8\"\n    PARALLEL_MAKE=\"-j 8\"\nfi\n\n# 이미지 아키텍처 검증\nlog_step \"다운로드된 이미지 아키텍처 검증 중...\"\nIMAGE_ARCH=$(docker image inspect $DOCKER_IMAGE | grep -o '\"Architecture\":\"[^\"]*\"' | cut -d'\"' -f4 | head -1)\nlog_info \"이미지 아키텍처: $IMAGE_ARCH\"\n\n# 워크스페이스 생성\nlog_step \"워크스페이스 생성 중...\"\nmkdir -p yocto-workspace/{workspace,downloads,sstate-cache}\n\n# 기존 컨테이너 정리\ndocker rm -f yocto-lecture 2>/dev/null || true\n\necho\nlog_step \"Yocto 컨테이너 시작 중...\"\necho \"플랫폼: $PLATFORM_FLAG\"\necho \"이미지: $DOCKER_IMAGE ($IMAGE_ARCH)\"\necho\n\ncd yocto-workspace\n\n# 컨테이너 실행\ndocker run -it --rm \\\n    $PLATFORM_FLAG \\\n    --privileged \\\n    -v $(pwd)/workspace:/workspace \\\n    -v $(pwd)/downloads:/opt/yocto/downloads \\\n    -v $(pwd)/sstate-cache:/opt/yocto/sstate-cache \\\n    -e BB_NUMBER_THREADS=${BB_THREADS} \\\n    -e PARALLEL_MAKE=\"${PARALLEL_MAKE}\" \\\n    -e MACHINE=qemux86-64 \\\n    -e TMPDIR=/tmp/yocto-build \\\n    -e BB_ENV_PASSTHROUGH_ADDITIONS=TMPDIR \\\n    --name yocto-lecture \\\n    ${DOCKER_IMAGE} \\\n    /bin/bash -c \"\n        echo '🎉 ARM64 VM Yocto 환경 시작!'\n        echo 'VM 아키텍처: $ARCH'\n        echo '컨테이너 아키텍처: \\$(uname -m)'\n        echo '이미지 아키텍처: $IMAGE_ARCH'\n        echo\n        echo '=== Yocto 환경 초기화 ==='\n        source /opt/poky/oe-init-build-env /workspace/build\n        \n        echo\n        echo '=== 빌드 설정 확인 ==='\n        echo 'BitBake 버전:'\n        bitbake --version\n        echo\n        echo 'MACHINE: qemux86-64'\n        echo 'BB_NUMBER_THREADS: ${BB_THREADS}'\n        echo 'PARALLEL_MAKE: ${PARALLEL_MAKE}'\n        echo\n        echo '=== 빌드 명령어 예시 ==='\n        echo '  bitbake core-image-minimal      # 최소 이미지'\n        echo '  bitbake core-image-full-cmdline # 전체 이미지'\n        echo '  runqemu qemux86-64              # QEMU 실행'\n        echo\n        echo '🚀 ARM64 VM에서 Yocto 빌드 준비 완료!'\n        /bin/bash -l\n    \"\n\necho\nlog_info \"ARM64 VM Yocto 환경이 종료되었습니다.\"\nlog_info \"워크스페이스는 yocto-workspace에 보존됩니다.\"" 