#!/bin/bash\n\n# VM exec format error 강제 해결 스크립트\n# Docker 이미지 완전 재설정\n\nset -e\n\necho \"🔧 VM exec format error 강제 해결\"\necho \"==================================\"\necho\n\n# 시스템 확인\nARCH=$(uname -m)\necho \"시스템 아키텍처: $ARCH\"\n\nDOCKER_IMAGE=\"jabang3/yocto-lecture:5.0-lts\"\n\necho\necho \"1단계: 모든 관련 이미지 완전 삭제\"\necho \"==================================\"\n\n# 모든 yocto 관련 이미지 삭제\ndocker images | grep yocto | awk '{print $3}' | xargs -r docker rmi -f\ndocker images | grep jabang3 | awk '{print $3}' | xargs -r docker rmi -f\n\n# Docker 시스템 완전 정리\ndocker system prune -af\ndocker volume prune -f\n\necho \"✅ 이미지 정리 완료\"\n\necho\necho \"2단계: 아키텍처별 이미지 강제 다운로드\"\necho \"========================================\"\n\nif [ \"$ARCH\" = \"aarch64\" ]; then\n    echo \"ARM64 VM 감지 - 실행 방법 선택:\"\n    echo \"1) ARM64 네이티브 (권장)\"\n    echo \"2) x86_64 에뮬레이션 (강의 환경 일치)\"\n    read -p \"선택 [1/2]: \" choice\n    \n    if [ \"$choice\" = \"2\" ]; then\n        echo \"x86_64 에뮬레이션 모드 설정...\"\n        \n        # QEMU 설치\n        if ! dpkg -l | grep -q qemu-user-static; then\n            echo \"QEMU 설치 중...\"\n            sudo apt-get update\n            sudo apt-get install -y qemu-user-static binfmt-support\n        fi\n        \n        # QEMU 에뮬레이션 활성화\n        echo \"QEMU 에뮬레이션 활성화...\"\n        docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n        \n        # x86_64 이미지 강제 다운로드 (다이제스트 사용)\n        echo \"x86_64 이미지 다이제스트로 강제 다운로드...\"\n        docker pull jabang3/yocto-lecture@sha256:cf56f85fbfeddb20a1f9277b63ada51b884f1bc65b86b28ebeb3a8698ac6437f\n        docker tag jabang3/yocto-lecture@sha256:cf56f85fbfeddb20a1f9277b63ada51b884f1bc65b86b28ebeb3a8698ac6437f $DOCKER_IMAGE\n        \n        PLATFORM_FLAG=\"--platform linux/amd64\"\n        TEST_MODE=\"x86_64 에뮬레이션\"\n        \n    else\n        echo \"ARM64 네이티브 모드 설정...\"\n        \n        # ARM64 이미지 강제 다운로드 (다이제스트 사용)\n        echo \"ARM64 이미지 다이제스트로 강제 다운로드...\"\n        docker pull jabang3/yocto-lecture@sha256:22ebbf27ef813ef38bdb681ff93c7c1d13c911bc9d68fb67460ca6f148a81939\n        docker tag jabang3/yocto-lecture@sha256:22ebbf27ef813ef38bdb681ff93c7c1d13c911bc9d68fb67460ca6f148a81939 $DOCKER_IMAGE\n        \n        PLATFORM_FLAG=\"--platform linux/arm64\"\n        TEST_MODE=\"ARM64 네이티브\"\n    fi\n    \nelif [ \"$ARCH\" = \"x86_64\" ]; then\n    echo \"x86_64 시스템 감지\"\n    \n    # x86_64 이미지 강제 다운로드 (다이제스트 사용)\n    echo \"x86_64 이미지 다이제스트로 강제 다운로드...\"\n    docker pull jabang3/yocto-lecture@sha256:cf56f85fbfeddb20a1f9277b63ada51b884f1bc65b86b28ebeb3a8698ac6437f\n    docker tag jabang3/yocto-lecture@sha256:cf56f85fbfeddb20a1f9277b63ada51b884f1bc65b86b28ebeb3a8698ac6437f $DOCKER_IMAGE\n    \n    PLATFORM_FLAG=\"--platform linux/amd64\"\n    TEST_MODE=\"x86_64 네이티브\"\n    \nelse\n    echo \"지원하지 않는 아키텍처: $ARCH\"\n    exit 1\nfi\n\necho \"✅ 이미지 다운로드 완료\"\n\necho\necho \"3단계: 이미지 검증\"\necho \"==================\"\n\n# 이미지 아키텍처 확인\nIMAGE_ARCH=$(docker image inspect $DOCKER_IMAGE | grep -o '\"Architecture\":\"[^\"]*\"' | cut -d'\"' -f4 | head -1)\necho \"다운로드된 이미지 아키텍처: $IMAGE_ARCH\"\necho \"설정된 테스트 모드: $TEST_MODE\"\n\necho\necho \"4단계: 간단 테스트 실행\"\necho \"=======================\"\n\n# 간단한 테스트 실행\necho \"컨테이너 기본 테스트 중...\"\n\nmkdir -p test-workspace\n\ndocker run --rm \\\n    $PLATFORM_FLAG \\\n    -v $(pwd)/test-workspace:/workspace \\\n    --name yocto-quick-test \\\n    $DOCKER_IMAGE \\\n    /bin/bash -c \"\n        echo '=== 기본 테스트 ==='\n        echo 'VM 아키텍처: $ARCH'\n        echo '컨테이너 아키텍처: \\$(uname -m)'\n        echo '이미지 아키텍처: $IMAGE_ARCH'\n        echo '테스트 모드: $TEST_MODE'\n        echo ''\n        echo '=== 환경 확인 ==='\n        ls -la /opt/poky/\n        echo ''\n        echo '✅ 기본 테스트 성공!'\n    \" && {\n    echo\n    echo \"🎉 VM exec format error 해결 완료!\"\n    echo \"=====================================\"\n    echo \"✅ 컨테이너가 정상적으로 실행됩니다\"\n    echo \"✅ $TEST_MODE 모드로 설정됨\"\n    echo \"✅ 이미지 아키텍처: $IMAGE_ARCH\"\n    echo\n    echo \"다음 명령으로 Yocto 환경을 시작하세요:\"\n    echo \"  ./scripts/arm64-vm-fix.sh\"\n    echo \"  또는\"\n    echo \"  docker run -it --rm $PLATFORM_FLAG -v \\$(pwd)/yocto-workspace:/workspace $DOCKER_IMAGE\"\n    \n} || {\n    echo\n    echo \"❌ 여전히 문제가 있습니다\"\n    echo \"==========================\"\n    echo \"다음을 확인해보세요:\"\n    echo \"1. Docker 버전: docker --version\"\n    echo \"2. 권한 확인: groups | grep docker\"\n    echo \"3. 재부팅 후 다시 시도\"\n    echo \"4. Docker 재설치\"\n}\n\necho\necho \"강제 수정 작업이 완료되었습니다.\"" 