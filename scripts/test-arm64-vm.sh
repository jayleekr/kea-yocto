#!/bin/bash\n\n# ARM64 VM 전용 빌드 테스트 스크립트\n# exec format error 해결을 위한 확실한 테스트\n\nset -e\n\n# 색상 정의\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nRED='\\033[0;31m'\nNC='\\033[0m'\n\nlog_info() {\n    echo -e \"${GREEN}[INFO]${NC} $1\"\n}\n\nlog_step() {\n    echo -e \"${BLUE}[STEP]${NC} $1\"\n}\n\nlog_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\nlog_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\necho \"🧪 ARM64 VM 빌드 테스트 (exec format error 해결)\"\necho \"===============================================\"\necho\n\n# 시스템 확인\nARCH=$(uname -m)\nlog_info \"시스템 아키텍처: $ARCH\"\n\nif [ \"$ARCH\" != \"aarch64\" ]; then\n    log_error \"이 스크립트는 ARM64 VM (aarch64) 전용입니다.\"\n    echo \"현재 시스템: $ARCH\"\n    echo \"다른 스크립트를 사용하세요:\"\n    echo \"  - x86_64: ./scripts/test-build.sh\"\n    echo \"  - ARM64 Mac: ./scripts/test-build.sh\"\n    exit 1\nfi\n\n# Docker 이미지 설정\nDOCKER_IMAGE=\"jabang3/yocto-lecture:5.0-lts\"\n\n# 기존 이미지 정리\nlog_step \"기존 이미지 정리 중...\"\ndocker rmi -f $DOCKER_IMAGE 2>/dev/null || true\ndocker system prune -f 2>/dev/null || true\n\n# 실행 방법 선택\necho \"ARM64 VM에서 테스트 방법을 선택하세요:\"\necho \"1) ARM64 네이티브 테스트 (권장)\"\necho \"2) x86_64 에뮬레이션 테스트 (강의 환경 일치)\"\nread -p \"선택 [1/2]: \" choice\n\nif [ \"$choice\" = \"2\" ]; then\n    # x86_64 에뮬레이션 모드\n    log_info \"x86_64 에뮬레이션 테스트 모드를 설정합니다.\"\n    \n    # QEMU 설치 확인\n    if ! dpkg -l | grep -q qemu-user-static; then\n        log_step \"QEMU 설치 중...\"\n        sudo apt-get update\n        sudo apt-get install -y qemu-user-static binfmt-support\n    fi\n    \n    # QEMU 에뮬레이션 활성화\n    log_step \"QEMU 에뮬레이션 활성화 중...\"\n    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes\n    \n    # x86_64 이미지 강제 다운로드\n    log_step \"x86_64 이미지 강제 다운로드 중...\"\n    docker pull --platform linux/amd64 $DOCKER_IMAGE\n    PLATFORM_FLAG=\"--platform linux/amd64\"\n    TEST_MODE=\"x86_64 에뮬레이션\"\n    \nelse\n    # ARM64 네이티브 모드\n    log_info \"ARM64 네이티브 테스트 모드를 설정합니다.\"\n    \n    # ARM64 이미지 강제 다운로드\n    log_step \"ARM64 이미지 강제 다운로드 중...\"\n    docker pull --platform linux/arm64 $DOCKER_IMAGE\n    PLATFORM_FLAG=\"--platform linux/arm64\"\n    TEST_MODE=\"ARM64 네이티브\"\nfi\n\n# 이미지 아키텍처 검증\nlog_step \"다운로드된 이미지 아키텍처 검증 중...\"\nIMAGE_ARCH=$(docker image inspect $DOCKER_IMAGE | grep -o '\"Architecture\":\"[^\"]*\"' | cut -d'\"' -f4 | head -1)\nlog_info \"이미지 아키텍처: $IMAGE_ARCH\"\nlog_info \"테스트 모드: $TEST_MODE\"\n\n# 워크스페이스 생성\nlog_step \"테스트 워크스페이스 생성 중...\"\nmkdir -p yocto-test-workspace/workspace\n\n# 기존 테스트 컨테이너 정리\ndocker rm -f yocto-test 2>/dev/null || true\n\necho\nlog_step \"ARM64 VM 빌드 테스트 시작...\"\necho \"모드: $TEST_MODE\"\necho \"플랫폼: $PLATFORM_FLAG\"\necho \"이미지: $DOCKER_IMAGE ($IMAGE_ARCH)\"\necho\n\ncd yocto-test-workspace\n\n# 빌드 테스트 실행\ndocker run --rm \\\n    $PLATFORM_FLAG \\\n    --privileged \\\n    -v $(pwd)/workspace:/workspace \\\n    -e TMPDIR=/tmp/yocto-build \\\n    -e BB_ENV_PASSTHROUGH_ADDITIONS=TMPDIR \\\n    -e BB_NUMBER_THREADS=4 \\\n    -e PARALLEL_MAKE=\"-j 4\" \\\n    --name yocto-test \\\n    ${DOCKER_IMAGE} \\\n    /bin/bash -c \"\n        echo '🎯 ARM64 VM Yocto 빌드 테스트 시작'\n        echo '================================'\n        echo\n        echo '=== 시스템 정보 ==='\n        echo 'VM 아키텍처: $ARCH'\n        echo '컨테이너 아키텍처: \\$(uname -m)'\n        echo '이미지 아키텍처: $IMAGE_ARCH'\n        echo '테스트 모드: $TEST_MODE'\n        echo 'CPU 코어: \\$(nproc)'\n        echo 'Memory: \\$(free -h | grep Mem)'\n        echo\n        \n        echo '=== Yocto 환경 초기화 ==='\n        source /opt/poky/oe-init-build-env /workspace/build\n        \n        echo\n        echo '=== BitBake 기본 확인 ==='\n        echo 'BitBake 버전:'\n        bitbake --version\n        echo\n        \n        echo '=== 메타데이터 파싱 테스트 ==='\n        echo '메타데이터 파싱 중... (약 1-2분 소요)'\n        if timeout 300 bitbake -p; then\n            echo '✅ 메타데이터 파싱 성공!'\n        else\n            echo '❌ 메타데이터 파싱 실패'\n            exit 1\n        fi\n        echo\n        \n        echo '=== core-image-minimal 빌드 계획 확인 ==='\n        echo '빌드 계획 분석 중... (dry-run)'\n        if timeout 300 bitbake -n core-image-minimal; then\n            echo '✅ core-image-minimal 빌드 계획 성공!'\n            \n            # 빌드 통계\n            echo\n            echo '=== 빌드 통계 ==='\n            bitbake -g core-image-minimal 2>/dev/null || true\n            if [ -f pn-buildlist ]; then\n                PACKAGE_COUNT=\\$(cat pn-buildlist | wc -l)\n                echo \\\"총 패키지 수: \\$PACKAGE_COUNT\\\"\n                echo \\\"예상 빌드 시간: 1-3시간 (하드웨어에 따라)\\\"\n            fi\n            echo\n            \n        else\n            echo '❌ core-image-minimal 빌드 계획 실패'\n            exit 1\n        fi\n        \n        echo '=== ARM64 VM 테스트 완료 ==='\n        echo '✅ exec format error 해결됨!'\n        echo '✅ Yocto 5.0 LTS 환경 정상 작동'\n        echo '✅ $TEST_MODE 모드 성공'\n        echo '✅ 메타데이터 파싱 성공'\n        echo '✅ 빌드 시스템 준비 완료'\n        echo\n        echo '🎉 ARM64 VM 테스트 완료! 실제 빌드를 시작하세요.'\n        echo\n        echo '=== 다음 단계 ==='\n        echo '1. 실제 빌드: bitbake core-image-minimal'\n        echo '2. QEMU 실행: runqemu qemux86-64'\n        echo '3. 컨테이너 재시작: cd .. && ./scripts/arm64-vm-fix.sh'\n        \n    \" && {\n    echo\n    log_info \"✅ ARM64 VM 빌드 테스트 성공!\"\n    echo \"이제 다음 명령으로 실제 개발을 시작할 수 있습니다:\"\n    echo \"  ./scripts/arm64-vm-fix.sh\"\n} || {\n    echo\n    log_error \"❌ ARM64 VM 빌드 테스트 실패\"\n    echo \"다음을 확인해보세요:\"\n    echo \"1. Docker 서비스: sudo systemctl status docker\"\n    echo \"2. 권한 확인: sudo usermod -aG docker \\$USER\"\n    echo \"3. 다른 모드 시도: 에뮬레이션 ↔ 네이티브\"\n    echo \"4. 이미지 재다운로드: docker pull --no-cache $DOCKER_IMAGE\"\n}\n\necho\nlog_info \"ARM64 VM 테스트가 완료되었습니다.\"\nlog_info \"테스트 워크스페이스는 yocto-test-workspace에 보존됩니다.\"" 